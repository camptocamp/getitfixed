{% extends layout %}
{% block content %}
<div class="container {{ 'issue-view' if issue else '' }}">

  <ol class="breadcrumb">
    <li><a href="{{request.route_url('c2cgeoform_index')}}">{{_('Issues')}}</a></li>
    <li class="active">{{request.translate(item_name[:80]) if item_name else _('Issue')}}</li>
  </ol>

  <div class="focus">
    <div class="subform">
      <div>
        <button type="button" class="btn btn-primary next">{{_('Next')}}</button>
      </div>
    </div>
  </div>

  {% include 'c2cgeoform:/templates/edit.jinja2' %}

</div>
{% endblock content %}

{% block scripts %}
<script>
  (function() {
    {% set form_field = form.field if (form.__class__.__name__ == 'ValidationFailure') else form %}
    let geometry_oid = '{{form_field['geometry'].oid if 'geometry' in form_field else ''}}'

    if (!geometry_oid) { return }

    let newIssue = {{'true' if new or form.__class__.__name__ == 'ValidationFailure' else 'false'}}
    let params = new URL(window.location).searchParams
    let [x, y, z] = ['x', 'y', 'z'].map(_ => params.get(_))

    const getSelectedText = el => {
      const sel = el.querySelector('select')
      return sel.options[sel.selectedIndex].text
    }

    deform.addCallback(geometry_oid, function () {

      // Recenter on feature or query params
      let map = c2cgeoform.getObjectMap(geometry_oid)
      let features = map.getLayers().item(1).getSource().getFeatures()
      if (features.length === 0) {
        if (x && y && z) {
          map.getView().setCenter([params.get('x'), params.get('y')].map(parseFloat))
          map.getView().setZoom(parseFloat(params.get('z')))
        }
      } else {
        map.getView().fit(features[0].getGeometry().getExtent(), {
          maxZoom: 18
        })
      }

      if (!window.matchMedia('(max-width: 576px)').matches || !newIssue) { return }

      // On mobile move geometry/cat/type on a temporary focused subform
      document.body.classList.add('focused')
      window.scrollTo(0, 0)
      let focus = document.querySelector('.focus')
      let mapEl = document.querySelector(`#item-${geometry_oid}`)
      focus.append(mapEl)

      let subform = document.querySelector('.subform')
      let typeEl = document.querySelector(`[class~=item-type_id]`)
      let catEl = document.querySelector(`[class~=item-category_id]`)
      let fieldset = document.querySelector('fieldset')
      subform.prepend(typeEl)
      subform.prepend(catEl)
      map.updateSize()

      // When validating subform, move back inputs into the form,
      // turning those 3 fields read-only
      focus.querySelector('.next').addEventListener('click', () => {
        document.body.classList.remove('focused')
        ;[typeEl, catEl, mapEl].forEach(e => (fieldset.prepend(e)))
        c2cgeoform.setReadOnly(geometry_oid)
        mapEl.querySelector('label').innerText = getSelectedText(catEl) + ' / ' + getSelectedText(typeEl)
        ;[typeEl, catEl, focus].forEach(e => {e.style.display = 'none'})
        mapEl.scrollIntoView({ behavior: 'smooth' })
      })
    })
  })()
</script>
{% endblock scripts %}
